{"version":3,"sources":["NavBar.jsx","ColorMatcher/presentation/ColorMatcherActionToolbar.jsx","ColorMatcher/presentation/ColorMatcherList.jsx","ColorMatcher/presentation/ColorMatcher.jsx","ColorMatcher/container/ColorMatcherContainer.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["NavBar","AppBar","position","Toolbar","style","background","Typography","variant","color","useStyles","makeStyles","root","margin","boxShadow","textField","width","marginRight","button","padding","ColorMatcherActionToolbar","props","classes","searchField","handleChange","handleKeyDown","hexError","errorHelperText","handleSearch","Paper","className","TextField","value","onChange","onKeyDown","label","id","InputProps","startAdornment","InputAdornment","inputProps","maxLength","autoFocus","error","helperText","Button","onClick","size","ColorMatcherList","columns","rows","length","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","key","align","minWidth","TableBody","row","hover","role","tabIndex","hex","format","ColorMatcher","elevation","toUpperCase","ColorMatcherContainer","React","useState","setSearchField","xkcdData","colorsData","setColorsData","setRows","setHexError","setErrorHelperText","RegExp","test","colors","distance","searchHex","xkcdHex","searchRGB","ColorConverter","rgb","xkcdRGB","Math","pow","calculateEuclideanDistanceBetweenRGB","sort","slice","name","toString","cymk","cmyk","event","target","theme","createMuiTheme","palette","primary","main","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.282f0bbe.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst NavBar = () => {\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar\n          style={{ background: 'linear-gradient(45deg,#0065b5,#2947ff 40%,#09437f)' }}\n        >\n          <Typography variant=\"subtitle1\" color=\"inherit\">\n            Color Matcher\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\nexport default NavBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    margin: '40px 0 25px',\n    boxShadow: 'none'\n  },\n  textField: {\n    width: '50%',\n    marginRight: '20px'\n  },\n  button: {\n    padding: '15px 40px',\n    color: '#faff00'\n  }\n});\nexport default function ColorMatcherActionToolbar(props) {\n  const classes = useStyles();\n\n  const {\n    searchField,\n    handleChange,\n    handleKeyDown,\n    hexError,\n    errorHelperText,\n    handleSearch\n  } = props;\n\n  return (\n    <Paper className={classes.root}>\n      <TextField\n        value={searchField}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        label=\"Type HEX color code and press ENTER to search\"\n        id=\"filled-start-adornment\"\n        InputProps={{\n          startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\n        }}\n        inputProps={{ maxLength: 6 }}\n        variant=\"outlined\"\n        autoFocus\n        error={hexError}\n        helperText={errorHelperText}\n        className={classes.textField}\n      />\n      <Button\n        onClick={handleSearch}\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"large\"\n        className={classes.button}\n      >\n        Search\n      </Button>\n    </Paper>\n  );\n}\n\nColorMatcherActionToolbar.propTypes = {\n  searchField: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired,\n  handleSearch: PropTypes.func.isRequired,\n  hexError: PropTypes.bool.isRequired,\n  errorHelperText: PropTypes.string.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nexport default function ColorMatcherList(props) {\n  const { columns, rows } = props;\n\n  return (\n    rows.length > 0 && (\n      <Paper>\n        <TableContainer>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableCell\n                    key={column.id}\n                    align={column.align}\n                    style={{ minWidth: column.minWidth, color: '#2947ff' }}\n                  >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.hex}>\n                    {columns.map((column) => {\n                      const value = row[column.id];\n\n                      return (\n                        <TableCell key={column.id}>\n                          {column.id === 'color' ? (\n                            <div style={{ background: value, width: 50 }}>\n                              &nbsp;\n                            </div>\n                          ) : column.format ? (\n                            column.format(value)\n                          ) : (\n                            value\n                          )}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n    )\n  );\n}\n\nColorMatcherList.propTypes = {\n  columns: PropTypes.array.isRequired,\n  rows: PropTypes.array.isRequired\n};\n","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport ColorMatcherActionToolbar from './ColorMatcherActionToolbar';\nimport ColorMatcherList from './ColorMatcherList';\nimport { Paper } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '90%',\n    margin: '0 auto',\n  }\n});\n\nexport default function ColorMatcher(props) {\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.root} elevation={0}>\n      <ColorMatcherActionToolbar {...props} />\n      <ColorMatcherList {...props} />\n    </Paper>\n  );\n}\n","import React from 'react';\n\nimport xkcdData from '../../data/xkcd.json';\nimport ColorConverter from 'color-convert';\n\nimport ColorMatcher from '../presentation/ColorMatcher';\n\nconst columns = [\n  { id: 'color', label: 'Color' },\n  { id: 'name', label: 'Name' },\n  { id: 'hex', label: 'HEX', format: (value) => value.toUpperCase() },\n  { id: 'rgb', label: 'RGB' },\n  { id: 'cymk', label: 'CYMK' }\n];\n\nexport default function ColorMatcherContainer() {\n  const [searchField, setSearchField] = React.useState('');\n  const [colorsData, setColorsData] = React.useState(xkcdData);\n  const [rows, setRows] = React.useState([]);\n  const [hexError, setHexError] = React.useState(false);\n  const [errorHelperText, setErrorHelperText] = React.useState('');\n\n  const handleChange = (event) => {\n    setSearchField(event.target.value);\n  };\n\n  const handleSearch = () => {\n    // regex for hex code ( 6 digit and can contain A-F, ignoring case)\n    const hexRegEx = new RegExp(/^[0-9A-F]{6}$/i);\n\n    // check if the entered value is correct CSS color or not\n    if (hexRegEx.test(searchField)) {\n      // for each xkcd color, get a ED score with search field\n      xkcdData.colors.map((color) => {\n        color.distance = calculateEuclideanDistanceBetweenRGB(\n          searchField,\n          color.hex\n        );\n\n        return {\n          color\n        };\n      });\n\n      setColorsData(xkcdData);\n      createTableData();\n      setHexError(false);\n      setErrorHelperText('');\n    } else {\n      setHexError(true);\n\n      setErrorHelperText(\n        'Invalid Hex code, please enter valid input: A 6 character hex alphanumeric value'\n      );\n    }\n  };\n\n  const handleKeyDown = (event) => {\n    // only allow when search field is not empty, search field is not blank and contains exact 6 characters\n    if (event.key === 'Enter' && searchField !== null && searchField !== '') {\n      handleSearch();\n    }\n  };\n\n  function createTableData() {\n    colorsData.colors.sort(({ distance: a }, { distance: b }) => a - b);\n\n    setRows(\n      colorsData.colors.slice(0, 50).map((color) => {\n        return {\n          color: color.hex,\n          name: color.color,\n          rgb: ColorConverter.hex.rgb(color.hex).toString(),\n          hex: color.hex,\n          cymk: ColorConverter.hex.cmyk(color.hex).toString(),\n          distance: color.distance\n        };\n      })\n    );\n  }\n\n  function calculateEuclideanDistanceBetweenRGB(searchHex, xkcdHex) {\n    const searchRGB = ColorConverter.hex.rgb(xkcdHex);\n    const xkcdRGB = ColorConverter.hex.rgb(searchHex);\n\n    return (\n      Math.pow(searchRGB[0] - xkcdRGB[0], 2) +\n      Math.pow(searchRGB[1] - xkcdRGB[1], 2) +\n      Math.pow(searchRGB[2] - xkcdRGB[2], 2)\n    );\n  }\n\n  return (\n    <ColorMatcher\n      searchField={searchField}\n      columns={columns}\n      rows={rows}\n      handleSearch={handleSearch}\n      handleChange={handleChange}\n      handleKeyDown={handleKeyDown}\n      hexError={hexError}\n      errorHelperText={errorHelperText}\n    />\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport NavBar from './NavBar';\nimport { ColorMatcherContainer } from './ColorMatcher';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#0a2832',\n    }\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <NavBar />\n      <ColorMatcherContainer />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}